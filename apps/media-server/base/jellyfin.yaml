---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: jellyfin-config
spec:
  storageClassName: nfs-nvme-retain
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: jellyfin
  name: jellyfin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jellyfin
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: jellyfin
    spec:
      containers:
      - image: lscr.io/linuxserver/jellyfin
        name: jellyfin
        resources:
          requests:
            cpu: "2"
            memory: "4Gi"
          limits:
            cpu: "4"
            memory: "8Gi"
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: JELLYFIN_PublishedServerUrl
          value: "https://jellyfin.local.zachary.day"
        ports:
        - name: http
          containerPort: 8096
        - name: https
          containerPort: 8920
        - name: client-discover
          containerPort: 7359
          protocol: UDP
        - name: svc-discover
          containerPort: 1900
          protocol: UDP
          
        volumeMounts:
        - name: config
          mountPath: /config
        - name: downloads
          mountPath: /data/downloads
        - name: movies
          mountPath: /data/movies
        - name: tvshows
          mountPath: /data/tvshows
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: jellyfin-config
      - name: downloads
        persistentVolumeClaim:
          claimName: downloads
      - name: movies
        persistentVolumeClaim:
          claimName: movies
      - name: tvshows
        persistentVolumeClaim:
          claimName: tvshows

---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: jellyfin
  name: jellyfin
spec:
  ports:
  - name: http
    port: 8096
    protocol: TCP
    targetPort: http
  - name: https
    port: 8920
    protocol: TCP
    targetPort: https
  selector:
    app: jellyfin
  type: ClusterIP
status:
  loadBalancer: {}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  creationTimestamp: null
  name: jellyfin
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt"
    #nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    #nginx.ingress.kubernetes.io/ssl-passthrough: "true"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - jellyfin.local.zachary.day
    secretName: jellyfin-ingress-tls
  rules:
  - host: jellyfin.local.zachary.day
    http:
      paths:
      - backend:
          service:
            name: jellyfin
            port:
              name: http
        path: /
        pathType: Prefix
status:
  loadBalancer: {}
